1. 포트란
FORTRAN은 수식(Formular) 변환기(Translator)의 약자이다. 포트란은 알골과 함께 과학 계산용으로 주로 사용되는 언어이며, 당시 7명의 전문가가 약 2년 반 동안에 걸쳐 완성한 것이 포트란의 기본을 이루었고, 그후 ANSI에서 이를 수정하고 능력을 확장시켜 포트란을 완성하였다.

포트란은 산술 기호(+, - 등)를 그대로 사용할 수 있으며, 삼각함수·지수함수·대수함수 등과 같은 기초적인 수학 함수들을 그대로 불러내어 쓸 수 있는 언어다. 그러나 이러한 방법은 현재의 각종 컴퓨터 언어에서는 기본적인 내용이지만 당시로서는 대단히 획기적인 방법이었다.

과학기술용 언어로는 포트란, 상업용 언어로는 코볼(COBOL)이 대표적인 제3세대 컴퓨터 언어로 1980년대까지 널리 활용되었지만, 보다 사용하기 쉬운 제4세대 컴퓨터 언어의 출현으로 이제는 거의 쓰이지 않는 언어가 되었다. 그러나 복잡한 계산 수행 성능이 뛰어나 공학과 자연과학 등 특정분야에서는 사용하고 있다. 

2. 코볼
common business oriented language의 약어로 컴퓨터의 프로그래밍을 쉽게 하기 위하여 고안된 프로그램 언어이다. 포트란(FORTRAN)과 알골(ALGOL)이 과학기술 계산용 언어인 반면, 코볼은 사무처리용으로 만들어진 언어로 미국 국방부을 중심으로 결성된 프로그램 언어로서 그룹 CODASYL(Conference on Data system Language)에 의해 1960년 처음으로 제정되었다. 

과학 계산에 비해 사무 계산은 복잡한 여러 가지 기록철을 많이 취급하며, 보고서의 인쇄 양식도 다양해 데이터의 기록 양식을 정하는 부분이 프로그램에서는 중요한 역할을 차지한다. 코볼은 일상 영어회화와 비슷한 구어체 문장 형태로 기술할 수 있도록 설계되어 사용되고 있으며 1968년 미국에서 사무처리 언어의 표준이 되었고 1974년 미국 표준 코볼(ANSI COBOL)이 완성되었으며, 1985년에는 기능을 보강하여 COBOL-85를 완성하였다. COBOL 프로그램은 다음의 4가지 부분으로 구성되어 있다. 


① 식별부(identification division):프로그램의 이름, 작성자, 작성일자, 컴파일 일자, 기계 설치 장소, 프로그램 설명문, 참고사항 등 프로그램 문서화를 위한 사항을 기술한다.

② 표지부(environment division):원시 프로그램이 컴파일되거나 프로그램이 실행될 컴퓨터, 프로그램 내에서 사용되는 각종 스위치와 기호들을 정의하는 구성 부분, 프로그램에서 사용하는 파일의 구조를 정의하는 인풋-아웃풋 부분으로 구성된다. 

③ 데이터부(data division):목적 프로그램에 의해 처리될 모든 자료를 기술하는데 파일의 실제 구조를 정의하는 파일 부분, 임시로 사용할 기억 장소를 정의하는 저장 부분, 서브프로그램 간의 데이터를 서로 교환할 때 필요한 기억 장소를 정의하는 연계 부분, 화면으로 데이터를 입력하기 위해 필요한 화면명을 기술하는 화면 부분으로 구성된다.

④ 절차부(procedure division):프로그램을 수행하는 실제 명령들을 기술하는데 코볼의 모든 명령은 절차부에만 기술된다. 

3. 알골
알골(ALGOL)은 algorithmic language를 줄여 붙여진 이름으로 대표적인 블록구조 언어다. 1960년 국제정보처리학회연합(IFIP)에서 만들어져 유럽 지역에서 많이 사용되었다. ALGOL 58로 불리는 이 언어의 당시 이름은 IAL이었다. 1960년에 제안된 ALGOL 60은 그 문법이 BNF 표기법으로 기술되었으며 구조화된 프로그래밍의 형태를 갖고 있었다. 알골 60은 수치자료와 동질성 배열을 강조한 과학 계산용 언어로 구조가 명료하고 구문 표기법으로 형색문법을 최초로 상용하였고, 피엘 원(PL/one), 파스칼(PASCAL), C언어, 에이다(AIDA) 등이 이 언어의 영향을 받았다. 

하지만 알골 언어는 형식을 갖는 입력문과 출력문을 제작하지 않아 실용적인 목적으로 사용하는 데 한계가 있어, 활성화되지 않았으며 현재는 거의 이용되지 않고 있다. 1968년에 ALGOL 68이 개발되었으며, ALGOL 68에서는 2단계 문법 Wijngaarden 표기법으로 문법이 기술되었다. ALGOL 68은 다양한 데이터형을 다루는 융통성이 주어져 과학 계산용의 범주를 벗어나 사무 처리용까지 적용범위를 확대하였다. 

4. 베이직
베이직(BASIC: Beginner's All-purpose Symbolic Instruction Code)은 쉬운 문법을 사용하여 교육용으로 만든 언어이다. 포트란 Ⅰ을 토대로 Algol 60(알골 60)을 거쳐 1964년에 만들어졌다. 이후 1975년 빌 게이츠(Bill Gates)와 폴 앨런(Paul Allen)이 초기 소형 컴퓨터인 MITS Altair(앨테어) 8800에서 쓸 '앨테어 베이직'을 만들며 마이크로소프트를 세웠다. 그 뒤로는 마이크로소프트에서 이 언어를 발전시키고 있다. 

특히 비주얼 베이직 1.0(1991)은 마이크로소프트가 만든 GUI에서 고속 응용 프로그램 개발(RAD: Rapid Application Developement)을 가능하게 해준다. 비주얼 베이직은 개발 환경이 시각적이고, 베이직 언어 계열이라 초보자가 익히기 쉽다. 비주얼 베이직 공식 제품 지원 기간은 2008년 3월에 끝났고, VB.NET이 이 뒤를 잇고 있다. 

5. 파스칼
파스칼은 원래 1968년 스위스 취리히 공과대학의 컴퓨터 과학자인 위스(Niklaus Wirth)교수에 의해 제안되어 프랑스의 수학자인 파스칼의 이름을 따서 명명됐다. 1970년대에 여러 가지 기능을 포함하여 탄생한 새로운 프로그래밍 언어 중의 하나로서, 최초의 컴파일러는 1971년에 작동되었다. 프로그래밍 검증 분야에서 매우 중요한 역할을 하고 있으며 알고리즘 기술용으로 각광을 받고 있으나 부프로그램은 별도로 컴파일하지 못하는 단점을 지니고 있다.

파스칼은 데이터를 구성하는 데 있어 데이터 길이의 제약이 없고 다양한 데이터 형식과 구조를 사용할 수 있으며, 조건(if-then-else)이나 반복(do-while)과 같은 많은 제어구조를 가지고 있기 때문에 구조화 프로그램의 개념과 원리를 쉽게 적용할 수 있다. 따라서 파스칼 언어는 전산학의 교육용 언어로서 유용하게 활용되었다. 알골(ALGOL)이 세 가지 타입만을 제공하는데 반해 파스칼은 추가적인 기본 타입과 새로운 타입을 정의할 수 있는 가능성뿐만 아니라 새로운 구조 형식인 레코드 셋, 파일(시퀀스) 등을 제공한다. 또 알골이 단지 정적인 변수만을 선언하는 데 그쳐, 직접적인 접근만 가능한데 비해 파스칼의 레코드 구조화변수는 포인터, 레퍼런스를 통해 간접으로 접근할 수 있다. 비록 상업적인 성공은 거두지 못했지만, 파스칼은 널리 확산되었고, 보다 세부적인 소프트웨어 프로젝트에 사용되는 언어가 되었다.

6. C++
탄생과 역사
1980년대까지 전세계적으로 가장 많은 사람들에게 사랑을 받고 가장 널리 사용된 프로그래밍 전문 언어는 C이다. 하지만 C언어 역시 한계에 부딪치게 되었고 이에 따라 고도로 복잡한 프로그램을 관리하기 위하여 C++가 탄생하게 되었다.

C++는 처음 소개된 이후로 1985년과 1989년, 그리고 C++에 ANSI표준을 적용하기 시작한 시기 등 3번에 거처 개정되었다. 1994년에 최초로 표준안이 발표되었으며 ANSI C++위원회는 사실상 스트루스트럽(C개발자)이 설정한 모든 사양을 그대로 수용하고 그외의 약간의 사양을 덧붙였다. 그렇기 때문에 C++는 C프로그래머가 쉽게 C++를 사용할 수 있다는 관련성에서 큰 장점이 있다.

객체지향 프로그래밍(OOP : Object Oriented Programing)
C++는 흔히 객체지향적 언어라고 한다. 객체 지향 프로그래밍은 새로운 방식의 프로그래밍 접근 방법이다. 프로그래밍이 탄생한 이후로 그 방식은 많은 변화를 겪었는데, 프로그래밍이 현격하게 다른 변혁을 겪을 때마다 새로운 접근 방식이 나타나 프로그래머가 그 전 단계보다 훨씬 더 복잡해진 프로그램을 처리할 수 있도록 도왔다. 예전의 구조적인 프로그래밍은 복잡한 프로그램 작성 시 프로그램의 규모가 일정 한계를 넘으면 가끔씩 실패하는 경우를 제외하고 상당히 우수한 기능을 해왔지만 그 보다 좀 더 복잡한 프로그램을 쓸 수 있는 새로운 프로그래밍 방식이 필요했다. 그래서 탄생한 것이 객체 지향 프로그래밍이다. 이는 구조적인 프로그래밍에서 사용되는 개념들을 최대한 활용하여 종전과는 다른 방식으로 이러한 개념을 엮어내는 역할을 한다.

특징
C의 대부분의 특징을 포함하고 있으므로 시스템 프로그래밍에 적합할 뿐만 아니라 클래스, 연산자 중복, 가상 함수 등과 같은 특징을 갖추고 있어 객체 지향 프로그래밍에 적합하다. 또한 C와 일치하는 부분이 C++를 널리 대중적인 언어가 되는데 도움을 주었다.

7. 파이썬
파이썬은 네덜란드 개발자 귀도 반 로섬(Guido van Rossum)이 만든 언어다. 그는 암스테르담대학교에서 컴퓨터과학과 수학을 전공했으며, CWI(Centrum voor Wiskunde en Informatica, 국립 수학 및 컴퓨터 과학 연구기관)라는 연구소에 근무하면서 인터프리터 언어(interpreted language)를 개선하는 일을 맡게 됐다. 그러면서 CWI는 ‘ABC’라는 프로그래밍 언어를 팀원들과 새로 만들었다. ABC 언어 프로젝트가 시작된 지 4~5년이 지나자, CWI는 눈에 띄는 성과가 없다는 이유로 프로젝트를 종료시켰다. 이 과정에서 귀도 반 로섬은 같은 회사의 ‘아모에바’라는 팀으로 옮겨 마이크로 커널 기반 분산시스템 환경에 대해 연구하는 일을 진행했다.

ABC 언어 개발과 분산시스템 연구는 파이썬을 만드는 데 중요한 영감을 주었다. 귀도 반 로섬은 “아모에바 프로젝트에 일하면서 하이레벨 언어가 필요하다는 것을 더욱 깨달았다”라며 “새로운 분산환경 시스템에 맞으면서 C와 셀에서 부족한 부분을 채워주는 새로운 언어를 개발하고 싶었다”라고 설명했다. 그렇게 해서 그는 취미활동으로 새로운 언어를 개발하기 시작했다.

‘파이썬(Python)’이란 영어의 의미는 원래 그리스 신화에 나오는 뱀 이름이다. 파이썬 로고에 두 개의 뱀이 서로 마주본 듯한 그림이 있는 이유도 이 때문이다. 하지만 귀도 반 로섬이 실제 ‘파이썬’이란 단어를 선택할 당시에는 그리스 신화를 참고한 것은 아니었다. 영국 <BBC> 방송의 코미디 프로그램인 ‘몬티 파이썬 비행 서커스(Monty Python's Flying Circus)’를 좋아해 가져온 단어였다. 파이썬 공식 홈페이지에 따르면 “귀도 반 로섬은 짧고, 특별하고, 미스터리한 느낌의 단어를 찾았다”라며 “그래서 파이썬이란 이름을 결정했다”라고 설명돼 있다.

귀도 반 로섬은 1989년부터 본격적으로 파이썬을 개발하기 시작했고, 1990년 파이썬의 첫 버전을 공개했다. 처음 버전은 CWI 내 동료들이 대부분 이용했으며, 그들의 피드백을 거쳐 개선돼 왔다.

1990년 이후에는 CWI가 아닌 외부에서 파이썬에 대한 소규모 세미나와 워크샵이 열리기 시작했다. 이때부터 몇몇 기업들은 파이썬을 실제 서비스에 하나둘 도입하기 시작했다. 귀도 반 로섬은 CWI 이후 CNRI(Corporation for National Research Initiatives), 비오픈닷컴, 잡코퍼레이션 등에 여러 단체와 기업에서 근무하며 파이썬만 전문적으로 개발했다. 이 과정에서 그는 파이썬에 대한 안정성을 높이고, 오픈소스 라이선스도 좀 더 유연하게 변경했다.

현재 파이썬은 대형 글로벌 기업부터 스타트업까지 다양하게 안정적으로 활용되고 있다. 구글, 야후, 유럽 입자 물리 연구소(CERN), 미국항공우주국(NASA) 등이 파이썬을 이용해 서비스를 구축했다. 귀도 반 로섬은 2005년부터 아예 구글에 합류했으며, 약 7년 동안 구글에서 파이썬 관련 프로젝트를 이끌었다.

실제로 구글은 파이썬을 많이 사용하는 기업으로 알려져 있다. 구글 내부에서 사용하는 코드리뷰 도구, ‘앱 엔진’ 같은 클라우드 제품 등이 파이썬을 이용해 만들어졌다. 귀도 반 로섬은 2012년 구글을 떠나 2013년부터 드롭박스(Dropbox)에 합류했다. 드롭박스에서는 현재 파이썬 언어를 개선하는 동시에 API 관련 개발을 진행하고 있다고 한다.

